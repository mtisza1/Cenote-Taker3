import os
#import pandas as pd

## set up temporary directory
if not os.path.isdir(os.path.join(config["run_title"], "ct_tmp")):
    os.makedirs(os.path.join(config["run_title"], "ct_tmp"))

TEMP_DIR = os.path.join(config["run_title"], "ct_tmp")

### setting universal minimum length
if config["circ_length_cutoff"] > config["linear_length_cutoff"]:
    LENGTH_MINIMUM = config["linear_length_cutoff"]
else:
    LENGTH_MINIMUM = config["circ_length_cutoff"]

if config["CIRC_MINIMUM_DOMAINS"] >= config["LIN_MINIMUM_DOMAINS"]:
	HALLMARK_MINIMUM = config["LIN_MINIMUM_DOMAINS"]
else:
	HALLMARK_MINIMUM = config["CIRC_MINIMUM_DOMAINS"]

### checking that all read files exist
if config["READS"] != "none":
    for read in config["READS"].split():
        if not os.path.isfile(read) or os.path.getsize(read) <= 0:
            print(f"{read} file does not exist. exiting")
            quit()



## more variables from config
run_title = config["run_title"]
CPU = config["CPU"]



def find_files(directory, prefix, ext):
    split_list = []
    for split in os.listdir(directory):
        if split.startswith(prefix) and split.endswith(ext):
            f = os.path.join(directory, split)

            if os.path.isfile(f) and os.path.getsize(f) > 0:
                split_list.append(f)
    try:
        return split_list
    except:
        return ""

def seqkit_splits(splits):
    n=range(1,splits+1)
    n000 = [f"{i:03d}" for i in n]
    return n000

def get_split_outputs(wildcards):
    # this makes the rest of the workflow wait for the checkpoint
    chk_out = checkpoints.seq_split1.get(**wildcards).output[0]
    SMP, = glob_wildcards(os.path.join(chk_out, "{sample}.fasta"))
    return expand(os.path.join(chk_out, "{SAMPLE}.fasta"), SAMPLE=SMP)

spl_og_dir = os.path.join(TEMP_DIR, "split_orig_contigs")
spl_prod_dir = os.path.join(TEMP_DIR, "split_og_prod")

wildcard_constraints:
    seqn = "\d+"

###############
#### rules ####
###############
rule all:
    input:
        get_final_virus_seqs
        #os.path.join(TEMP_DIR, "virus.fsa"),
        #os.path.join(TEMP_DIR, "virus.tbl"),
        #os.path.join(TEMP_DIR, "virus.cmt"),
        


rule filter_contig_length:
    input:
        og_contigs = config["original_contigs"]
    params:
        lmin = LENGTH_MINIMUM,
        run = run_title
    output:
        filt_contigs = os.path.join(run_title, \
            f"{run_title}.contigs_over_{LENGTH_MINIMUM}nt.fasta")
    shell:
        '''
        seqkit seq --quiet -m {params.lmin} {input.og_contigs} |\
            seqkit replace --quiet -p '^' -r {params.run}_{{nr}}@#@# |\
            sed 's/@#@#/ /g' > {output.filt_contigs}
        '''



checkpoint seq_split1:
    input:
        filt_contigs = os.path.join(run_title, \
            f"{run_title}.contigs_over_{LENGTH_MINIMUM}nt.fasta")
    params:
        CPU = config["CPU"],
        dir = os.path.join(TEMP_DIR, "split_orig_contigs")
    output:
        #split_fna = expand(os.path.join(spl_og_dir, run_title +\
        #    ".contigs_over_" + str(LENGTH_MINIMUM) + "nt.part_{seqn}.fasta"), \
        #    seqn=seqkit_splits(CPU), allow_missing=True),
        #directory(spl_og_dir)
        split_fna = os.path.join(spl_og_dir, f"{run_title}.contigs_over_{LENGTH_MINIMUM}nt.part_" + "{seqn}.fasta")
    shell:
        '''
        seqkit split --quiet -j {params.CPU} -p {params.CPU} \
          -O {params.dir} {input.filt_contigs}
        
        touch {output.split_fna}
        '''


rule prodigal_og:
    input:
        #split_fna = [os.path.join(spl_og_dir, f"{run_title}.contigs_over_{LENGTH_MINIMUM}nt.part_{seqn}.fasta") for seqn in seqkit_splits(CPU)]
        split_fna = os.path.join(spl_og_dir, f"{run_title}.contigs_over_{LENGTH_MINIMUM}nt.part_" + "{seqn}.fasta")
    output:
        #split_faa = [os.path.join(spl_og_dir, f"{run_title}.contigs_over_{LENGTH_MINIMUM}nt.part_{seqn}.prod.faa") for seqn in seqkit_splits(CPU)]
        split_faa = os.path.join(spl_og_dir, f"{run_title}.contigs_over_{LENGTH_MINIMUM}nt.part_" + "{seqn}.prod.faa")
    log:
       #[os.path.join(spl_og_dir, f"{run_title}.contigs_over_{LENGTH_MINIMUM}nt.part_{seqn}.prod.log") for seqn in seqkit_splits(CPU)]
       os.path.join(spl_og_dir, f"{run_title}.contigs_over_{LENGTH_MINIMUM}nt.part_" + "{seqn}.prod.log")
    shell:
        '''
        if [ -s {input.split_fna} ] ; then
            prodigal -a {output.split_faa} -i {input.split_fna} -p meta -q > {log} 2>&1
        else
            touch {output.split_faa}
        fi
        '''


rule pyhmmer_prodigal_og_vir:
    input:
        split_faa = [os.path.join(spl_og_dir, f"{run_title}.contigs_over_{LENGTH_MINIMUM}nt.part_{seqn}.prod.faa") for seqn in seqkit_splits(CPU)]
    params:
        script_dir = config['CENOTE_SCRIPTS'],
        CPU = config["CPU"],
        indir = spl_og_dir,
        virdir = os.path.join(TEMP_DIR, "orig_pyhmmer_virion"),
        viriondb = os.path.join(config['C_DBS'], "hmmscan_DBs/virus_specific_baits_plus_missed6a.h3m"),
        evalue = "1e-8"
    output:
        vir_contig_hits = os.path.join(TEMP_DIR, "orig_pyhmmer_virion/contig_hit_count.tsv"),
        vir_report = os.path.join(TEMP_DIR, "orig_pyhmmer_virion/pyhmmer_report_AAs.tsv"),
    shell:
        '''
        python {params.script_dir}/python_modules/pyhmmer_runner.py {params.indir} {params.virdir}\
          {params.viriondb} {params.CPU} {params.evalue}
        '''

rule pyhmmer_prodigal_og_rep:
    input:
        split_faa = [os.path.join(spl_og_dir, f"{run_title}.contigs_over_{LENGTH_MINIMUM}nt.part_{seqn}.prod.faa") for seqn in seqkit_splits(CPU)]
    params:
        script_dir = config['CENOTE_SCRIPTS'],
        CPU = config["CPU"],
        indir = spl_og_dir,
        repdir = os.path.join(TEMP_DIR, "orig_pyhmmer_rep"),
        repdb = os.path.join(config['C_DBS'], "hmmscan_DBs/virus_replication_clusters3.h3m"),
        evalue = "1e-8"
    output:
        rep_contig_hits = os.path.join(TEMP_DIR, "orig_pyhmmer_rep/contig_hit_count.tsv"),
        rep_report = os.path.join(TEMP_DIR, "orig_pyhmmer_rep/pyhmmer_report_AAs.tsv"),
    shell:
        '''
        python {params.script_dir}/python_modules/pyhmmer_runner.py {params.indir} {params.repdir}\
          {params.repdb} {params.CPU} {params.evalue}
        '''

rule pyhmmer_og_combine:
    input:
        rep_contig_hits = os.path.join(TEMP_DIR, "orig_pyhmmer_rep/contig_hit_count.tsv"),
        rep_report = os.path.join(TEMP_DIR, "orig_pyhmmer_rep/pyhmmer_report_AAs.tsv"),
        vir_contig_hits = os.path.join(TEMP_DIR, "orig_pyhmmer_virion/contig_hit_count.tsv"),
        vir_report = os.path.join(TEMP_DIR, "orig_pyhmmer_virion/pyhmmer_report_AAs.tsv"),
    params:
        script_dir = config['CENOTE_SCRIPTS'],
        virdir = os.path.join(TEMP_DIR, "orig_pyhmmer_virion"),
        repdir = os.path.join(TEMP_DIR, "orig_pyhmmer_rep"),
        hallmin = HALLMARK_MINIMUM,
        htype = config['HALL_TYPE'],
        temdir = TEMP_DIR
    output:
        keep_contigs = os.path.join(TEMP_DIR, "contigs_to_keep.txt"),
        hm_contig_report = os.path.join(TEMP_DIR, "hallmarks_per_orig_contigs.tsv"),
        hm_list_keep = os.path.join(TEMP_DIR, "hallmarks_for_keepcontigs1.txt")
    shell:
        '''
        python {params.script_dir}/python_modules/combine_hallmark_counts.py {params.virdir}\
          {params.repdir} {params.hallmin} {params.htype} {params.temdir}
        '''


rule get_hm_contigs:
    input:
        keep_contigs = os.path.join(TEMP_DIR, "contigs_to_keep.txt"),
        filt_contigs = os.path.join(run_title, \
            f"{run_title}.contigs_over_{LENGTH_MINIMUM}nt.fasta")
    output:
        hm_unp_contigs = os.path.join(TEMP_DIR, "unprocessed_hallmark_contigs.fasta")
    shell:
        '''
        seqkit grep --quiet -f {input.keep_contigs} {input.filt_contigs} > {output.hm_unp_contigs}
        '''

rule terminal_repeats:
    input:
        hm_unp_contigs = os.path.join(TEMP_DIR, "unprocessed_hallmark_contigs.fasta")
    params:
        script_dir = config['CENOTE_SCRIPTS'],
        wrap = config["WRAP"],
        temdir = TEMP_DIR
    output:
        trim_TRs = os.path.join(TEMP_DIR, "trimmed_TRs_hallmark_contigs.fasta"),
        tr_sum = os.path.join(TEMP_DIR, "hallmark_contigs_terminal_repeat_summary.tsv")
    shell:
        '''
        python {params.script_dir}/python_modules/terminal_repeats.py\
          {input.hm_unp_contigs} {params.temdir} {params.wrap}
        '''

rule rotator:
    input:
        trim_TRs = os.path.join(TEMP_DIR, "trimmed_TRs_hallmark_contigs.fasta"),
        tr_sum = os.path.join(TEMP_DIR, "hallmark_contigs_terminal_repeat_summary.tsv")
    params:
        wrap = config["WRAP"],
        temdir = TEMP_DIR
    output:
        orient_contigs = os.path.join(TEMP_DIR, "oriented_hallmark_contigs.fasta")
    shell:
        '''
        if [ {params.wrap} == "True" ] ; then

            if [ ! -d "{params.temdir}/rotation" ]; then
                mkdir {params.temdir}/rotation
            fi

            awk '{{OFS=FS="\t"}}{{ if (NR != 1 && $4 != "NA") {{print $1, $3}} }}'\
            {params.temdir}/hallmark_contigs_terminal_repeat_summary.tsv |\
            while read DTR_CONTIG TRIM_LENGTH ; do
                seqkit grep --quiet -p "${{DTR_CONTIG}}" {params.temdir}/trimmed_TRs_hallmark_contigs.fasta |\
                prodigal -a {params.temdir}/rotation/${{DTR_CONTIG}}.unrotated.faa -i /dev/stdin -c -p meta -q >/dev/null 2>&1
                FWD_GENES=$( grep "^>" {params.temdir}/rotation/${{DTR_CONTIG}}.unrotated.faa | sed 's/ # /	/g' |\
                    awk '{{FS=OFS="\t"}}{{if ($0 ~ "partial=00;start_type" && $4 == 1) {{print $4}} }}' | wc -l )
                REV_GENES=$( grep "^>" {params.temdir}/rotation/${{DTR_CONTIG}}.unrotated.faa | sed 's/ # /	/g' |\
                    awk '{{FS=OFS="\t"}}{{if ($0 ~ "partial=00;start_type" && $4 == -1) {{print $4}} }}' | wc -l )
                if [ $FWD_GENES -ge $REV_GENES ] && [ $FWD_GENES -ge 1 ]; then
                    START_BASE=$( grep "^>" {params.temdir}/rotation/${{DTR_CONTIG}}.unrotated.faa | sed 's/ # /	/g' |\
                        awk '{{FS=OFS="\t"}}{{if ($0 ~ "partial=00;start_type" && $4 == 1) {{print $2, ($3-$2)}} }}' |\
                        sort -rg -k2,2 | head -n1 | cut -f1 )
                    seqkit grep --quiet -p "${{DTR_CONTIG}}" {params.temdir}/trimmed_TRs_hallmark_contigs.fasta |\
                    seqkit restart --quiet -i ${{START_BASE}} > {params.temdir}/rotation/${{DTR_CONTIG}}.rotate.fasta
                elif [ $REV_GENES -ge 1 ]; then
                    seqkit grep --quiet -p "${{DTR_CONTIG}}" {params.temdir}/trimmed_TRs_hallmark_contigs.fasta |\
                    seqkit seq --quiet -t DNA -r -p > {params.temdir}/rotation/${{DTR_CONTIG}}.rc.fna
                    prodigal -a {params.temdir}/rotation/${{DTR_CONTIG}}.rc.faa -i {params.temdir}/rotation/${{DTR_CONTIG}}.rc.fna -p meta -q >/dev/null 2>&1
                    RC_FWD_GENES=$( grep "^>" {params.temdir}/rotation/${{DTR_CONTIG}}.rc.faa | sed 's/ # /	/g' |\
                        awk '{{FS=OFS="\t"}}{{if ($0 ~ "partial=00;start_type" && $4 == 1) {{print $4}} }}' | wc -l )
                    if [ $RC_FWD_GENES -ge 1 ] ; then 
                        START_BASE=$( grep "^>" {params.temdir}/rotation/${{DTR_CONTIG}}.rc.faa | sed 's/ # /	/g' |\
                            awk '{{FS=OFS="\t"}}{{if ($0 ~ "partial=00;start_type" && $4 == 1) {{print $2, ($3-$2)}} }}' |\
                            sort -rg -k2,2 | head -n1 | cut -f1 )
                        cat {params.temdir}/rotation/${{DTR_CONTIG}}.rc.fna |\
                        seqkit restart --quiet -i ${{START_BASE}} > {params.temdir}/rotation/${{DTR_CONTIG}}.rotate.fasta
                    else
                        echo "Can't find suitable ORF to set rotation of ${{DTR_CONTIG}} and will remain unrotated"
                        seqkit grep --quiet -p "${{DTR_CONTIG}}" {params.temdir}/trimmed_TRs_hallmark_contigs.fasta > {params.temdir}/rotation/${{DTR_CONTIG}}.rotate.fasta
                    fi
                else
                    echo "Can't find suitable ORF to set rotation of $nucl_fa and will remain unrotated"
                    seqkit grep --quiet -p "${{DTR_CONTIG}}" {params.temdir}/trimmed_TRs_hallmark_contigs.fasta > {params.temdir}/rotation/${{DTR_CONTIG}}.rotate.fasta
                fi
            done

            awk '{{OFS=FS="\t"}}{{ if (NR != 1 && $4 == "NA") {{print $1}} }}'\
            {params.temdir}/hallmark_contigs_terminal_repeat_summary.tsv > {params.temdir}/hallmark_contigs_no_DTRS.txt

            if [ -s {params.temdir}/hallmark_contigs_no_DTRS.txt ] ; then
                seqkit grep --quiet -f {params.temdir}/hallmark_contigs_no_DTRS.txt\
                {params.temdir}/trimmed_TRs_hallmark_contigs.fasta > {params.temdir}/hallmark_contigs_no_DTRS.fasta
            fi

            ALL_DTRS=$( find {params.temdir}/rotation -type f -name "*.rotate.fasta" )

            if [ -n "$ALL_DTRS" ] ; then
                echo "$ALL_DTRS" | while read SEQ ; do
                    cat $SEQ
                done > {params.temdir}/hallmark_contigs_with_DTRS.rotated.fasta
            fi

            if [ -s {params.temdir}/hallmark_contigs_with_DTRS.rotated.fasta ] ; then
                cat {params.temdir}/hallmark_contigs_with_DTRS.rotated.fasta >> {params.temdir}/oriented_hallmark_contigs.fasta
            fi

            if [ -s {params.temdir}/hallmark_contigs_no_DTRS.fasta ] ; then
                cat {params.temdir}/hallmark_contigs_no_DTRS.fasta >> {params.temdir}/oriented_hallmark_contigs.fasta
            fi


        else
            echo "not wrapping"
            
            cp {params.temdir}/trimmed_TRs_hallmark_contigs.fasta {params.temdir}/oriented_hallmark_contigs.fasta
        fi
        '''

rule mmseqs_blastp_hm_tax:
    input:
        hm_list_keep = os.path.join(TEMP_DIR, "hallmarks_for_keepcontigs1.txt"),
        split_faa = [os.path.join(spl_og_dir, f"{run_title}.contigs_over_{LENGTH_MINIMUM}nt.part_{seqn}.prod.faa") for seqn in seqkit_splits(CPU)]
    params:
        taxdb = os.path.join(config['C_DBS'], "mmseqs_DBs/refseq_virus_prot_taxDB"),
        mm_temp = os.path.join(TEMP_DIR, "hallmark_tax/tmp")
    threads:
        int(CPU)
    output:
        hm_ORFs = os.path.join(TEMP_DIR, "hallmark_tax/orig_hallmark_genes.faa"),
        hm_db = os.path.join(TEMP_DIR, "hallmark_tax/orig_hallmark_genesDB"),
        mm_res = os.path.join(TEMP_DIR, "hallmark_tax/orig_hallmarks_resDB"),
        mmseqs_tab = os.path.join(TEMP_DIR, "hallmark_tax/orig_hallmarks_align.tsv")
    shell:
        '''
        seqkit grep --quiet -f {input.hm_list_keep}\
          {input.split_faa} > {output.hm_ORFs}
        
        mmseqs createdb {output.hm_ORFs} {output.hm_db} -v 1

        mmseqs search {output.hm_db} {params.taxdb} {output.mm_res} {params.mm_temp}\
          -v 1 --start-sens 1 --sens-steps 3 -s 7

        mmseqs convertalis {output.hm_db} {params.taxdb} {output.mm_res} {output.mmseqs_tab}\
          --format-output query,target,pident,alnlen,evalue,theader,taxlineage -v 1
        '''

rule orfcaller_decision:
    input:
        mmseqs_tab = os.path.join(TEMP_DIR, "hallmark_tax/orig_hallmarks_align.tsv"),
        tr_sum = os.path.join(TEMP_DIR, "hallmark_contigs_terminal_repeat_summary.tsv"),
        keep_contigs = os.path.join(TEMP_DIR, "contigs_to_keep.txt")
    params:
        outdir = os.path.join(TEMP_DIR, "hallmark_tax"),
        script_dir = config['CENOTE_SCRIPTS'],
    output:
        prod_seqs = os.path.join(TEMP_DIR, "hallmark_tax/prodigal_seqs1.txt"),
        phan_seqs = os.path.join(TEMP_DIR, "hallmark_tax/phanotate_seqs1.txt")
    shell:
        '''
        python {params.script_dir}/python_modules/orfcaller_decision1.py\
          {input.mmseqs_tab} {input.tr_sum} {params.outdir}
        '''

rule taxed_seqs:
    input:
        prod_seqs = os.path.join(TEMP_DIR, "hallmark_tax/prodigal_seqs1.txt"),
        phan_seqs = os.path.join(TEMP_DIR, "hallmark_tax/phanotate_seqs1.txt")
    output:
        taxed_seqs = os.path.join(TEMP_DIR, "hallmark_tax/taxed_seqs1.txt")
    shell:
        '''
        if [ -s {output.phan_seqs} ] ; then
            cat {output.phan_seqs} >> {output.taxed_seqs}
        fi

        if [ -s {output.prod_seqs} ] ; then
            cat {output.prod_seqs} >> {output.taxed_seqs}
        fi
        if [ -s {output.taxed_seqs} ] ; then
            grep -v -f {output.taxed_seqs} {input.keep_contigs} >> {output.prod_seqs}
        fi
        '''

rule hm_contigs_grep_prod:
    input:
       prod_seqs = os.path.join(TEMP_DIR, "hallmark_tax/prodigal_seqs1.txt"),
       orient_contigs = os.path.join(TEMP_DIR, "oriented_hallmark_contigs.fasta")
    output:
        prod_contigs = os.path.join(TEMP_DIR, "reORF/oriented_hallmark_contigs.prodigal.fasta"),
    shell:
        '''
        seqkit grep --quiet -f {input.prod_seqs} {input.orient_contigs} > {output.prod_contigs}
        '''

rule hm_contigs_split_prod:
    input:
        prod_contigs = os.path.join(TEMP_DIR, "reORF/oriented_hallmark_contigs.prodigal.fasta"),
    params:
        prod_split_dir = os.path.join(TEMP_DIR, "reORF/prod_split"),
        CPU = CPU
    output:
        split_prod_contigs = os.path.join(TEMP_DIR, "reORF/prod_split/oriented_hallmark_contigs.prodigal.part_{seqn}.fasta")
    shell:
        '''
        seqkit split --quiet -j {params.CPU} -p {params.CPU} -O {params.prod_split_dir} {input.prod_contigs}

        touch {output.split_prod_contigs}
        '''

rule hm_contigs_prodigal:
    input:
        split_prod_contigs = os.path.join(TEMP_DIR, "reORF/prod_split/oriented_hallmark_contigs.prodigal.part_{seqn}.fasta")
    output:
        split_prod_faa = os.path.join(TEMP_DIR, "reORF/prod_split/oriented_hallmark_contigs.prodigal.part_{seqn}.prod.faa"),
        split_prod_gff = os.path.join(TEMP_DIR, "reORF/prod_split/oriented_hallmark_contigs.prodigal.part_{seqn}.prod.gff")
    log:
       os.path.join(TEMP_DIR, "reORF/prod_split/oriented_hallmark_contigs.prodigal.part_{seqn}.prod.log")
    shell:
        '''
        if [ -s {input.split_prod_contigs} ] ; then
            prodigal -a {output.split_prod_faa} -i {input.split_prod_contigs}\
              -f gff -o {output.split_prod_gff} -p meta -q > {log} 2>&1
        else
            touch {output.split_prod_faa}
            touch {output.split_prod_gff}
        fi
        '''

rule prod_gcode:
    input:
        prod_seqs = os.path.join(TEMP_DIR, "hallmark_tax/prodigal_seqs1.txt"),
        split_prod_gff = [os.path.join(TEMP_DIR, f"reORF/prod_split/oriented_hallmark_contigs.prodigal.part_{seqn}.prod.gff") for seqn in seqkit_splits(CPU)]
    params:
        script_dir = config['CENOTE_SCRIPTS'],
    output:
        prod_gcodes = os.path.join(TEMP_DIR, "reORF/prod_split/contig_gcodes1.txt"),
        big_gff = os.path.join(TEMP_DIR, "reORF/all_prod.gff")
    shell:
        '''
        bash {params.script_dir}/bash_modules/get_prod_gcodes.sh {input.prod_seqs} "{input.split_prod_gff}"\
          {output.big_gff} {output.prod_gcodes}
        '''

rule hm_contigs_grep_phan:
    input:
       phan_seqs = os.path.join(TEMP_DIR, "hallmark_tax/phanotate_seqs1.txt"),
       orient_contigs = os.path.join(TEMP_DIR, "oriented_hallmark_contigs.fasta")
    output:
        phan_contigs = os.path.join(TEMP_DIR, "reORF/oriented_hallmark_contigs.phanotate.fasta"),
    shell:
        '''
        seqkit grep --quiet -f {input.phan_seqs} {input.orient_contigs} > {output.phan_contigs}
        '''

rule hm_contigs_split_phan:
    input:
        phan_contigs = os.path.join(TEMP_DIR, "reORF/oriented_hallmark_contigs.phanotate.fasta"),
    params:
        phan_split_dir = os.path.join(TEMP_DIR, "reORF/phan_split"),
        CPU = CPU
    output:
        split_phan_contigs = os.path.join(TEMP_DIR, "reORF/phan_split/oriented_hallmark_contigs.phanotate.part_{seqn}.fasta")
    shell:
        '''
        seqkit split --quiet -j {params.CPU} -p {params.CPU} -O {params.phan_split_dir} {input.phan_contigs}

        touch {output.split_phan_contigs}
        '''

rule hm_contigs_phanotate:
    input:
        split_phan_contigs = os.path.join(TEMP_DIR, "reORF/phan_split/oriented_hallmark_contigs.phanotate.part_{seqn}.fasta")
    output:
        split_phan_tsv = os.path.join(TEMP_DIR, "reORF/phan_split/oriented_hallmark_contigs.phanotate.part_{seqn}.phan_genes.bad_fmt.tsv"),
    log:
       os.path.join(TEMP_DIR, "reORF/phan_split/oriented_hallmark_contigs.prodigal.part_{seqn}.prod.log")
    shell:
        '''
        if [ -s {input.split_phan_contigs} ] ; then
            phanotate.py -f tabular {input.split_phan_contigs} -o {output.split_phan_tsv} > {log} 2>&1
        else
            touch {output.split_phan_tsv}
        fi
        '''

rule phan_to_bed:
    input:
        split_phan_tsv = os.path.join(TEMP_DIR, "reORF/phan_split/oriented_hallmark_contigs.phanotate.part_{seqn}.phan_genes.bad_fmt.tsv"),
    params:
        script_dir = config['CENOTE_SCRIPTS'],
    output:
        split_phan_bed = os.path.join(TEMP_DIR, "reORF/phan_split/oriented_hallmark_contigs.phanotate.part_{seqn}.phan_genes.bed")
    shell:
        '''
        if [ -s {input.split_phan_tsv} ] ; then
            awk '{{OFS=FS="\t"}}{{ if ($1 !~ /^#/) \
              {{ if ($2>$1) {{print $4, ($1-1), $2, $4"_"NR, $5, $3}}\
              else {{print $4, ($2-1), $1, $4"_"NR, $5, $3}} }} }}'\
              {input.split_phan_tsv} > {output.split_phan_bed}
        else
            touch {output.split_phan_bed}
        fi
        '''

rule bed_to_gene:
    input:
        split_phan_contigs = os.path.join(TEMP_DIR, "reORF/phan_split/oriented_hallmark_contigs.phanotate.part_{seqn}.fasta"),
        split_phan_bed = os.path.join(TEMP_DIR, "reORF/phan_split/oriented_hallmark_contigs.phanotate.part_{seqn}.phan_genes.bed")
    output:
        split_phan_nORF = os.path.join(TEMP_DIR, "reORF/phan_split/oriented_hallmark_contigs.phanotate.part_{seqn}.phan_genes.fna"),
    shell:
        '''
        if [ -s {input.split_phan_contigs} ] && [ -s {input.split_phan_bed} ] ; then
            bedtools getfasta -fi {input.split_phan_contigs} -bed {input.split_phan_bed}\
              -fo {output.split_phan_nORF} -s -nameOnly
        else
            touch {output.split_phan_nORF}
        fi
        '''

rule phan_gene_translate:
    input:
        split_phan_nORF = os.path.join(TEMP_DIR, "reORF/phan_split/oriented_hallmark_contigs.phanotate.part_{seqn}.phan_genes.fna"),
    output:
        split_phan_aORF = os.path.join(TEMP_DIR, "reORF/phan_split/oriented_hallmark_contigs.phanotate.part_{seqn}.faa")
    log:
        os.path.join(TEMP_DIR, "reORF/phan_split/oriented_hallmark_contigs.phanotate.part_{seqn}.log")
    shell:
        '''
        if [ -s {input.split_phan_nORF} ] ; then
            seqkit translate --quiet -x -T 11 {input.split_phan_nORF}\
              -o {output.split_phan_aORF} > {log} 2>&1
        else
            touch {output.split_phan_aORF}
        fi
        '''

rule cat_reORF:
    input:
        split_phan_aORF = [os.path.join(TEMP_DIR, f"reORF/phan_split/oriented_hallmark_contigs.phanotate.part_{seqn}.faa") for seqn in seqkit_splits(CPU)],
        split_prod_faa = [os.path.join(TEMP_DIR, f"reORF/prod_split/oriented_hallmark_contigs.prodigal.part_{seqn}.prod.faa") for seqn in seqkit_splits(CPU)]
    output:
        all_reORF = os.path.join(TEMP_DIR, "reORF/reORFcalled_all.faa")
    shell:
        '''
        cat {input.split_phan_aORF} {input.split_prod_faa} | sed 's/(.*//g' > {output.all_reORF}
        '''

rule split_reORF:
    input:
        all_reORF = os.path.join(TEMP_DIR, "reORF/reORFcalled_all.faa")
    params:
        reORF_split_dir = os.path.join(TEMP_DIR, "reORF_pyhmmer1_split"),
        CPU = CPU
    output:
        split_reORF = os.path.join(TEMP_DIR, "reORF_pyhmmer1_split/reORFcalled_all.part_{seqn}.faa")
    shell:
        '''
        seqkit split --quiet -j {params.CPU} -p {params.CPU} -O {params.reORF_split_dir} {input.all_reORF}

        touch {output.split_reORF}
        '''

use rule pyhmmer_prodigal_og_vir as pyhmmer_prodigal_reORF_vir with:
    input:
        split_faa = [os.path.join(TEMP_DIR, f"reORF_pyhmmer1_split/reORFcalled_all.part_{seqn}.faa") for seqn in seqkit_splits(CPU)]
    params:
        indir = os.path.join(TEMP_DIR, "reORF_pyhmmer1_split"),
        virdir = os.path.join(TEMP_DIR, "virion_reORF_pyhmmer"),
        evalue = "1e-6",
        script_dir = config['CENOTE_SCRIPTS'],
        CPU = config["CPU"],
        viriondb = os.path.join(config['C_DBS'], "hmmscan_DBs/virus_specific_baits_plus_missed6a.h3m"),
    output:
        vir_contig_hits = os.path.join(TEMP_DIR, "virion_reORF_pyhmmer/contig_hit_count.tsv"),
        vir_report = os.path.join(TEMP_DIR, "virion_reORF_pyhmmer/pyhmmer_report_AAs.tsv")

use rule pyhmmer_prodigal_og_rep as pyhmmer_prodigal_reORF_rep with:
    input:
        split_faa = [os.path.join(TEMP_DIR, f"reORF_pyhmmer1_split/reORFcalled_all.part_{seqn}.faa") for seqn in seqkit_splits(CPU)]
    params:
        indir = os.path.join(TEMP_DIR, "reORF_pyhmmer1_split"),
        repdir = os.path.join(TEMP_DIR, "rep_reORF_pyhmmer"),
        evalue = "1e-6",
        script_dir = config['CENOTE_SCRIPTS'],
        CPU = config["CPU"],
        repdb = os.path.join(config['C_DBS'], "hmmscan_DBs/virus_replication_clusters3.h3m"),
    output:
        rep_contig_hits = os.path.join(TEMP_DIR, "rep_reORF_pyhmmer/contig_hit_count.tsv"),
        rep_report = os.path.join(TEMP_DIR, "rep_reORF_pyhmmer/pyhmmer_report_AAs.tsv"),

rule hits_pyhmmer_repvir:
    input:
        os.path.join(TEMP_DIR, "virion_reORF_pyhmmer/pyhmmer_report_AAs.tsv"),
        os.path.join(TEMP_DIR, "rep_reORF_pyhmmer/pyhmmer_report_AAs.tsv"),
    output:
        rd_hits = os.path.join(TEMP_DIR, "virion_reORF_pyhmmer/hit_this_round1.txt")
    shell:
        '''
        awk FNR!=1 {input} | cut -f1 > {output.rd_hits}
        '''

rule grep_nohit_repvir:
    input:
        rd_hits = os.path.join(TEMP_DIR, "virion_reORF_pyhmmer/hit_this_round1.txt"),
        split_reORF = os.path.join(TEMP_DIR, "reORF_pyhmmer1_split/reORFcalled_all.part_{seqn}.faa")
    params:
        CPU = CPU
    output:
        no1_AAs = os.path.join(TEMP_DIR, "reORF_pyhmmer2_split/reORFcalled_all.part_{seqn}.no1.faa")
    shell:
        '''
        if [ -s {input.rd_hits} ] ; then
            seqkit grep --quiet -j {params.CPU} -v -f {input.rd_hits} {input.split_reORF} > {output.no1_AAs}
        else
            cp {input.split_reORF} {output.no1_AAs}
        fi
        '''

use rule pyhmmer_prodigal_og_vir as pyhmmer_prodigal_reORF_com with:
    input:
        split_faa = [os.path.join(TEMP_DIR, f"reORF_pyhmmer2_split/reORFcalled_all.part_{seqn}.no1.faa") for seqn in seqkit_splits(CPU)]
    params:
        indir = os.path.join(TEMP_DIR, "reORF_pyhmmer2_split"),
        virdir = os.path.join(TEMP_DIR, "comm_reORF_pyhmmer"),
        evalue = "1e-4",
        script_dir = config['CENOTE_SCRIPTS'],
        CPU = config["CPU"],
        viriondb = os.path.join(config['C_DBS'], "hmmscan_DBs/useful_hmms_baits_and_not2a.h3m"),
    output:
        vir_contig_hits = os.path.join(TEMP_DIR, "comm_reORF_pyhmmer/contig_hit_count.tsv"),
        vir_report = os.path.join(TEMP_DIR, "comm_reORF_pyhmmer/pyhmmer_report_AAs.tsv")

use rule hits_pyhmmer_repvir as hits_pyhmmer_com with:
    input:
        os.path.join(TEMP_DIR, "comm_reORF_pyhmmer/pyhmmer_report_AAs.tsv")
    output:
        rd_hits = os.path.join(TEMP_DIR, "comm_reORF_pyhmmer/hit_this_round1.txt")


rule grep_nohit_com:
    input:
        rd_hits = os.path.join(TEMP_DIR, "comm_reORF_pyhmmer/hit_this_round1.txt"),
        no1_AAs = [os.path.join(TEMP_DIR, f"reORF_pyhmmer2_split/reORFcalled_all.part_{seqn}.no1.faa") for seqn in seqkit_splits(CPU)]
    params:
        CPU = CPU
    output:
        no2_AAs = os.path.join(TEMP_DIR, "reORF_mmseqs_combined/all_AA_seqs.no2.faa")
    shell:
        '''
        if [ -s {input.rd_hits} ] ; then
            seqkit grep --quiet -j {params.CPU} -v -f {input.rd_hits} {input.no1_AAs} > {output.no2_AAs}
        else
            cat {input.no1_AAs} > {output.no2_AAs}
        fi
        '''


rule mmseqs_cdd:
    input:
        no2_AAs = os.path.join(TEMP_DIR, "reORF_mmseqs_combined/all_AA_seqs.no2.faa")
    params:
        cdd_db = os.path.join(config['C_DBS'], "mmseqs_DBs/CDD"),
        mm_temp = os.path.join(TEMP_DIR, "reORF_mmseqs_combined/tmp")
    threads:
        int(CPU)
    output:
        rem_db = os.path.join(TEMP_DIR, "reORF_mmseqs_combined/all_AA_seqs.no2DB"),
        cdd_res = os.path.join(TEMP_DIR, "reORF_mmseqs_combined/all_AA_seqs.no2_vs_CDD_resDB"),
        mmseqs_tab = os.path.join(TEMP_DIR, "reORF_mmseqs_combined/no2_seqs_CDD.tsv")
    shell:
        '''
        mmseqs createdb {input.no2_AAs} {output.rem_db} -v 1

        touch {output.cdd_res}
        
        mmseqs search {output.rem_db} {params.cdd_db} {output.cdd_res} {params.mm_temp} -s 4 -v 1

        mmseqs convertalis {output.rem_db} {params.cdd_db} {output.cdd_res} {output.mmseqs_tab}\
          --format-output query,target,pident,alnlen,evalue,bits -v 1
        '''

rule mmseqs_besthit:
    input:
        mmseqs_tab = os.path.join(TEMP_DIR, "reORF_mmseqs_combined/no2_seqs_CDD.tsv")
    params:
        cdd_annot = os.path.join(config['C_DBS'], "mmseqs_DBs/cddid_all.tbl"),
        wdir = os.path.join(TEMP_DIR, "reORF_mmseqs_combined"),
        script_dir = config['CENOTE_SCRIPTS'],
    output:
        mm_best = os.path.join(TEMP_DIR, "reORF_mmseqs_combined/summary_no2_AAs_vs_CDD.besthit.tsv")
    shell:
        '''
        python {params.script_dir}/python_modules/parse_mmseqs_cdd_results1.py\
          {input.mmseqs_tab} {params.cdd_annot} {params.wdir}
        '''

rule assess_genes:
    input:
        tr_sum = os.path.join(TEMP_DIR, "hallmark_contigs_terminal_repeat_summary.tsv"),
        split_phan_bed = [os.path.join(TEMP_DIR, f"reORF/phan_split/oriented_hallmark_contigs.phanotate.part_{seqn}.phan_genes.bed") for seqn in seqkit_splits(CPU)],
        split_prod_gff = [os.path.join(TEMP_DIR, f"reORF/prod_split/oriented_hallmark_contigs.prodigal.part_{seqn}.prod.gff") for seqn in seqkit_splits(CPU)],
        vir_report = os.path.join(TEMP_DIR, "virion_reORF_pyhmmer/pyhmmer_report_AAs.tsv"),
        com_report = os.path.join(TEMP_DIR, "comm_reORF_pyhmmer/pyhmmer_report_AAs.tsv"),
        rep_report = os.path.join(TEMP_DIR, "rep_reORF_pyhmmer/pyhmmer_report_AAs.tsv"),
        mm_best = os.path.join(TEMP_DIR, "reORF_mmseqs_combined/summary_no2_AAs_vs_CDD.besthit.tsv"),
    params:
        htype = config['HALL_TYPE'],
        bed_dir = os.path.join(TEMP_DIR, "reORF/phan_split"),
        gff_dir = os.path.join(TEMP_DIR, "reORF/prod_split"),
        vir_dom_list = os.path.join(config['C_DBS'], "viral_cdds_and_pfams_191028.txt"),
        script_dir = config['CENOTE_SCRIPTS'],
        outdir = os.path.join(TEMP_DIR, "assess_prune")
    output:
        assess_tab = os.path.join(TEMP_DIR, "assess_prune/contig_gene_annotation_summary.tsv"),
        hm_bed = os.path.join(TEMP_DIR, "assess_prune/contig_gene_annotation_summary.hallmarks.bed"),
        prune_dir = directory(os.path.join(TEMP_DIR, "assess_prune/prune_figures"))
    shell:
        '''
        python {params.script_dir}/python_modules/assess_virus_genes1.py {input.tr_sum}\
          {params.bed_dir} {params.gff_dir} {input.vir_report} {input.com_report} {input.rep_report}\
          {input.mm_best} {params.vir_dom_list} {params.outdir} {params.htype}
        '''

rule vir_chunks:
    input:
        hm_bed = os.path.join(TEMP_DIR, "assess_prune/contig_gene_annotation_summary.hallmarks.bed")
    params:
        prune_dir = os.path.join(TEMP_DIR, "assess_prune/prune_figures"),
        lin_hm = config["LIN_MINIMUM_DOMAINS"],
        script_dir = config['CENOTE_SCRIPTS'],
    output:
        indiv_dir = directory(os.path.join(TEMP_DIR, "assess_prune/indiv_seqs")),
        finv = os.path.join(TEMP_DIR, "assess_prune/indiv_seqs/.finished_vir_chunks")
    shell:
        '''
        bash {params.script_dir}/bash_modules/vir_chunks.sh {input.hm_bed} {params.prune_dir}\
         {params.lin_hm} {output.indiv_dir}
        '''

rule adjust_viruses:
    input:
        assess_tab = os.path.join(TEMP_DIR, "assess_prune/contig_gene_annotation_summary.tsv"),
        finv = os.path.join(TEMP_DIR, "assess_prune/indiv_seqs/.finished_vir_chunks")
    params:
        script_dir = config['CENOTE_SCRIPTS'],
        outdir = TEMP_DIR,
        indiv_dir = os.path.join(TEMP_DIR, "assess_prune/indiv_seqs")
    output:
        pruned_sum = os.path.join(TEMP_DIR, "contig_gene_annotation_summary.pruned.tsv"),
        pruned_bed = os.path.join(TEMP_DIR, "prune_coords.bed"),
        hypo_orf = os.path.join(TEMP_DIR, "hypothetical_proteins.after_chunk.txt")
    shell:
        '''
        python {params.script_dir}/python_modules/adjust_viruses1.py {params.indiv_dir}\
          {input.assess_tab} {params.outdir}
        '''


checkpoint subseq_prune:
    input:
        pruned_bed = os.path.join(TEMP_DIR, "prune_coords.bed"),
        orient_contigs = os.path.join(TEMP_DIR, "oriented_hallmark_contigs.fasta")
    params:
        CPU = CPU
    output:
        pruned_contigs = os.path.join(TEMP_DIR, "oriented_hallmark_contigs.pruned.fasta")
    shell:
        '''
        seqkit subseq --quiet -j {params.CPU} --bed {input.pruned_bed} {input.orient_contigs} |\
          sed 's/>.* />/g' > {output.pruned_contigs}
        '''

def get_final_virus_seqs(wildcards):
    exts = ['fsa', 'tbl', 'cmt']
    pruned = checkpoints.subseq_prune.get().output['pruned_contigs'].open()
    fin_virus = [line.strip(">").rstrip() for line in pruned if line.startswith(">")]

    return expand(os.path.join(config["run_title"], "sequin_and_genome_maps", "{virus}.{ext}"),\
     virus = fin_virus, ext = exts)

print(get_final_virus_seqs)

rule hypo_grep:
    input:
       hypo_orf = os.path.join(TEMP_DIR, "hypothetical_proteins.after_chunk.txt"),
       all_reORF = os.path.join(TEMP_DIR, "reORF/reORFcalled_all.faa")
    output:
        hypo_AAs = os.path.join(TEMP_DIR, "hypo_AAs/reORFcalled_hypo.faa"),
    shell:
        '''
        seqkit grep --quiet -f {input.hypo_orf} {input.all_reORF} > {output.hypo_AAs}
        '''

rule hypo_split:
    input:
        hypo_AAs = os.path.join(TEMP_DIR, "hypo_AAs/reORFcalled_hypo.faa"),
    params:
        hypo_split_dir = os.path.join(TEMP_DIR, "reORF_phrogs_split"),
        CPU = CPU
    output:
        split_hypo_AAs = os.path.join(TEMP_DIR, "reORF_phrogs_split/reORFcalled_hypo.part_{seqn}.faa")
    shell:
        '''
        seqkit split --quiet -j {params.CPU} -p {params.CPU} -O {params.hypo_split_dir} {input.hypo_AAs}

        touch {output.split_hypo_AAs}
        '''

use rule pyhmmer_prodigal_og_vir as pyhmmer_phrogs with:
    input:
        split_faa = [os.path.join(TEMP_DIR, f"reORF_phrogs_split/reORFcalled_hypo.part_{seqn}.faa") for seqn in seqkit_splits(CPU)]
    params:
        indir = os.path.join(TEMP_DIR, "reORF_phrogs_split"),
        virdir = os.path.join(TEMP_DIR, "phrogs_pyhmmer"),
        evalue = "1e-3",
        script_dir = config['CENOTE_SCRIPTS'],
        CPU = config["CPU"],
        viriondb = os.path.join(config['C_DBS'], "hmmscan_DBs/phrogs_for_ct.h3m"),
    output:
        vir_contig_hits = os.path.join(TEMP_DIR, "phrogs_pyhmmer/contig_hit_count.tsv"),
        vir_report = os.path.join(TEMP_DIR, "phrogs_pyhmmer/pyhmmer_report_AAs.tsv")


use rule hits_pyhmmer_repvir as hits_pyhmmer_phrogs with:
    input:
        os.path.join(TEMP_DIR, "phrogs_pyhmmer/pyhmmer_report_AAs.tsv")
    output:
        rd_hits = os.path.join(TEMP_DIR, "phrogs_pyhmmer/hit_this_round1.txt")

rule tRNAscan:
    input:
        pruned_contigs = os.path.join(TEMP_DIR, "oriented_hallmark_contigs.pruned.fasta")
    output:
        tRNA_rep = os.path.join(TEMP_DIR, "oriented_hallmark_contigs.pruned.tRNAscan.tsv")
    log:
        os.path.join(TEMP_DIR, "tRNAscan-se.log")
    shell:
        '''
        tRNAscan-SE -Q -G -o {output.tRNA_rep} --brief\
          {input.pruned_contigs} > {log} 2>&1
        '''

rule read_depth:
    input:
        pruned_contigs = os.path.join(TEMP_DIR, "oriented_hallmark_contigs.pruned.fasta")
    params:
        reads = config["READS"],
        CPU = CPU
    output:
        read_cov = os.path.join(TEMP_DIR, "mapping_reads/oriented_hallmark_contigs.pruned.coverage.tsv")
    log:
        os.path.join(TEMP_DIR, "read_depth.log")
    shell:
        '''
        if [ "{params.reads}" != "none" ] ; then
            minimap2 -t {params.CPU} -ax sr {input.pruned_contigs} {params.reads} |\
              samtools sort - |\
              samtools coverage -o {output.read_cov} - > {log} 2>&1
            
        else
            touch {output.read_cov}
        fi
        '''


rule grep_final_hm:
    input:
        rd_hits = os.path.join(TEMP_DIR, "virion_reORF_pyhmmer/hit_this_round1.txt"),
        all_reORF = os.path.join(TEMP_DIR, "reORF/reORFcalled_all.faa")
    output:
        fin_hm_AA = os.path.join(TEMP_DIR, "final_taxonomy/hallmark_proteins.faa")
    shell:
        '''
        seqkit grep --quiet -f {input.rd_hits} {input.all_reORF} > {output.fin_hm_AA}
        '''

rule mmseqs_tax_final:
    input:
        fin_hm_AA = os.path.join(TEMP_DIR, "final_taxonomy/hallmark_proteins.faa")
    params:
        taxdb = os.path.join(config['C_DBS'], "mmseqs_DBs/refseq_virus_prot_taxDB"),
        mm_temp = os.path.join(TEMP_DIR, "final_taxonomy/tmp")
    threads:
        int(CPU)
    output:
        hm_db = os.path.join(TEMP_DIR, "final_taxonomy/hallmark_proteinsDB"),
        mm_res = os.path.join(TEMP_DIR, "final_taxonomy/hallmark_proteins_resDB"),
        mmseqs_tab = os.path.join(TEMP_DIR, "final_taxonomy/hallmark_proteins_align.tsv")
    shell:
        '''
        mmseqs createdb {input.fin_hm_AA} {output.hm_db} -v 1

        mmseqs search {output.hm_db} {params.taxdb} {output.mm_res} {params.mm_temp}\
          -v 1 --start-sens 1 --sens-steps 3 -s 7

        mmseqs convertalis {output.hm_db} {params.taxdb} {output.mm_res} {output.mmseqs_tab}\
          --format-output query,target,pident,alnlen,evalue,theader,taxlineage -v 1
        '''

rule vote_taxonomy:
    input:
        mmseqs_tab = os.path.join(TEMP_DIR, "final_taxonomy/hallmark_proteins_align.tsv"),
        pruned_sum = os.path.join(TEMP_DIR, "contig_gene_annotation_summary.pruned.tsv"),
    params:
        script_dir = config['CENOTE_SCRIPTS'],
        outdir = os.path.join(TEMP_DIR, "final_taxonomy")
    output:
        fin_tax = os.path.join(TEMP_DIR, "final_taxonomy/virus_taxonomy_summary.tsv")
    shell:
        '''
        python {params.script_dir}/python_modules/vote_taxonomy.py {input.mmseqs_tab}\
          {input.pruned_sum} {params.outdir}
        '''

checkpoint sequin_fsas:
    input:
        pruned_contigs = os.path.join(TEMP_DIR, "oriented_hallmark_contigs.pruned.fasta"),
        fin_tax = os.path.join(TEMP_DIR, "final_taxonomy/virus_taxonomy_summary.tsv"),
        tr_sum = os.path.join(TEMP_DIR, "hallmark_contigs_terminal_repeat_summary.tsv"),
        phan_seqs = os.path.join(TEMP_DIR, "hallmark_tax/phanotate_seqs1.txt"),
        prod_gcodes = os.path.join(TEMP_DIR, "reORF/prod_split/contig_gcodes1.txt")
    params:
        script_dir = config['CENOTE_SCRIPTS'],
        sequin_dir = os.path.join(config["run_title"], "sequin_and_genome_maps")
    output:
        #fsa_dir = directory(os.path.join(TEMP_DIR, "fsa_files")),
        fsas = os.path.join(config["run_title"], "sequin_and_genome_maps", "{virus}.fsa")
    shell:
        '''
        python {params.script_dir}/python_modules/make_sequin_fsas.py {input.pruned_contigs}\
          {input.fin_tax} {input.tr_sum} {TEMP_DIR} {params.sequin_dir}\
          {input.phan_seqs} {input.prod_gcodes}

        '''
"""
def get_virus_fsa(wildcards):
    virus_output = checkpoints.sequin_fsas.get(**wildcards).output['fsa_dir']
    SEQNAMES, = glob_wildcards(os.path.join(virus_output, "{vir}.fsa"))
    return expand(os.path.join(virus_output, "{VIRUSS}.fsa"),\
      VIRUSS=SEQNAMES)

rule cp_fsa:
    input:
        fsas = get_virus_fsa
    output:
        expand(os.path.join(config["run_title"], "sequin_and_genome_maps", "{VIRUSS}.fsa"),\
          VIRUSS= glob_wildcards(os.path.join(TEMP_DIR, "fsa_files", "{vir}.fsa")))
    shell:
        '''
        cp {input.tbls} {output}

        '''


rule merge_fsa:
    input:
        expand(os.path.join(config["run_title"], "sequin_and_genome_maps", "{VIRUSS}.fsa"),\
          VIRUSS= glob_wildcards(os.path.join(TEMP_DIR, "fsa_files", "{vir}.fsa")))
    output:
        os.path.join(TEMP_DIR, "virus.fsa")
    shell:
        "cat {input} > {output}"
"""

checkpoint sequin_tbls:
    input:
        pruned_sum = os.path.join(TEMP_DIR, "contig_gene_annotation_summary.pruned.tsv"),
        tRNA_rep = os.path.join(TEMP_DIR, "oriented_hallmark_contigs.pruned.tRNAscan.tsv"),
        phrogs_rep = os.path.join(TEMP_DIR, "phrogs_pyhmmer/pyhmmer_report_AAs.tsv")
    params:
        script_dir = config['CENOTE_SCRIPTS'],
        sequin_dir = os.path.join(config["run_title"], "sequin_and_genome_maps")
    output:
        #tsqn_dir = directory(os.path.join(TEMP_DIR, "tbl_files")),
        tbls = os.path.join(config["run_title"], "sequin_and_genome_maps", "{virus}.tbl")
    shell:
        '''
        python {params.script_dir}/python_modules/make_sequin_tbls.py {input.pruned_sum}\
          {input.tRNA_rep} {input.phrogs_rep} {params.sequin_dir}
        '''

"""
def get_virus_tbl1(wildcards):
    virus_output = checkpoints.sequin_tbls.get(**wildcards).output['tsqn_dir']
    TBLNAMES, = glob_wildcards(os.path.join(virus_output, "{vir}.tbl"))
    return expand(os.path.join(virus_output, "{VIRUST}.tbl"),\
      VIRUST=TBLNAMES)


rule cp_tbl:
    input:
        tbls = get_virus_tbl1
    output:
        expand(os.path.join(config["run_title"], "sequin_and_genome_maps", "{VIRUST}.tbl"),\
          VIRUST= glob_wildcards(os.path.join(TEMP_DIR, "tbl_files", "{vir}.tbl")))
    shell:
        '''
        cp {input.tbls} {output}

        '''

rule merge_tbl1:
    input:
        expand(os.path.join(config["run_title"], "sequin_and_genome_maps", "{VIRUST}.tbl"),\
          VIRUST= glob_wildcards(os.path.join(TEMP_DIR, "tbl_files", "{vir}.tbl")))
    output:
        os.path.join(TEMP_DIR, "virus.tbl")
    shell:
        "cat {input} > {output}"

"""

checkpoint sequin_cmt:
    input:
        pruned_contigs = os.path.join(TEMP_DIR, "oriented_hallmark_contigs.pruned.fasta"),
        read_cov = os.path.join(TEMP_DIR, "mapping_reads/oriented_hallmark_contigs.pruned.coverage.tsv")
    params:
        sequin_dir = os.path.join(config["run_title"], "sequin_and_genome_maps")
    output:
        #cmts_dir = directory(os.path.join(TEMP_DIR, "cmt_files")),
        tbls = os.path.join(config["run_title"], "sequin_and_genome_maps", "{virus}.cmt")
    shell:
        '''
        if [ ! -d {params.sequin_dir} ] ; then
            mkdir  {params.sequin_dir}
        fi

        grep -F ">" {input.pruned_contigs} | sed 's/>//g' | while read SEQNAME ; do
            if [ -s {input.read_cov} ] ; then
                COVERAGE=$( awk -v SNAME="$SEQNAME" '{{OFS=FS="\t"}}\
                  {{ if ($1 == SNAME) {{print $7}} }}' {input.read_cov} | head -n1 )
            else
                COVERAGE=1
            fi
            echo "StructuredCommentPrefix	##Genome-Assembly-Data-START##" > {params.sequin_dir}/${{SEQNAME}}.cmt
            echo "Assembly Method	whoknows" >> {params.sequin_dir}/${{SEQNAME}}.cmt
            echo "Genome Coverage	"$COVERAGE"x" >> {params.sequin_dir}/${{SEQNAME}}.cmt
            echo "Sequencing Technology	Illumina" >> {params.sequin_dir}/${{SEQNAME}}.cmt
            echo "Annotation Pipeline	Cenote-Taker 3" >> {params.sequin_dir}/${{SEQNAME}}.cmt
            echo "URL	https://github.com/mtisza1/Cenote-Taker3" >> {params.sequin_dir}/${{SEQNAME}}.cmt
        done

        '''

"""
def get_virus_cmt(wildcards):
    cmt_output = checkpoints.sequin_cmt.get(**wildcards).output['cmts_dir']
    CMTNAMES, = glob_wildcards(os.path.join(cmt_output, "{vir}.cmt"))
    return expand(os.path.join(cmt_output, "{VIRUSC}.cmt"),\
      VIRUSC=CMTNAMES)

def get_final_cmt(wildcards):
    cmt_output = checkpoints.sequin_cmt.get(**wildcards).output['cmts_dir']
    CMTNAMES, = glob_wildcards(os.path.join(cmt_output, "{vir}.cmt"))
    return expand(os.path.join(config["run_title"], "sequin_and_genome_maps", "{VIRUSC}.cmt"),\
      VIRUSC=CMTNAMES)

rule cp_cmt:
    input:
        cmts = get_virus_cmt
    output:
        expand(os.path.join(config["run_title"], "sequin_and_genome_maps", "{VIRUSC}.cmt"),\
         VIRUSC = glob_wildcards(os.path.join(TEMP_DIR, "cmt_files", "{vir}.cmt")))
    shell:
        '''
        cp {input.cmts} {output}

        '''

rule merge_cmt:
    input:
        #expand(os.path.join(config["run_title"], "sequin_and_genome_maps", "{VIRUSC}.cmt"),\
        # VIRUSC = glob_wildcards(os.path.join(TEMP_DIR, "cmt_files", "{vir}.cmt")))
        get_final_cmt
    output:
        os.path.join(TEMP_DIR, "virus.cmt")
    shell:
        "cat {input} > {output}"
"""


